@page "/test/weather"
@using MyPageOnGitHub.Code

@inject HttpClient Http
@inject IJSRuntime JsRuntime

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Farenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
    @if (forecasts != null)
    {
        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.SaveAs" OnClick="@DownloadExcelFile" />
    }
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    private void DownloadExcelFile()
    {
        List<WeatherForecast> liste = (forecasts != null) ? forecasts.ToList() : new List<WeatherForecast>();
        var excelBytes = ExcelService.GenerateExcelWorkbook<WeatherForecast>(liste);
        JsRuntime.InvokeVoidAsync("saveAsFile", $"Liste_{DateTime.Now.ToString("yyyyMMdd_HHmmss")}.xlsx", Convert.ToBase64String(excelBytes));
    }
}
